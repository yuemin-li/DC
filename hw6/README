This the fifth homework about multi-thread concurrency in distributed computing class.The distributed control of currency exchange value is implemented by the totally-ordered multicast using Lamport’s logical clocks.

There are seven classed defined in all.
Clock.java: a logical clock for each process.
LocalClock.java: a local logical clock ticks at a specific clock rate, running as a thread in Lamport process.
Currency.java: a currency object storing currency sell rate and buy rate in pair. Multiple thread can operate on this object, needs to be secured by synchronized.
Msg.java: define a message object with constructing and parsing method, the message could be any update(terminate)/ack message to send/recv in communication.
Worker.java: worker thread, generate rate changes, sending update(terminate) msg to processes
Dispatcher.java: dispatcher thread, recv update msg, multicast ack and forward acked update to application
Lamport.java: entry of the program, parse processID, num of operations and clock rate for each process from command line 

instructions to run:
1.make
2.define the ip and port information for each process in the info.txt file.
3.run each process as "java Lamport [processID] [operation_num] [clock_rate]", I'm not implementing advanced connecting topology for processes comminucation by now, so you need to start processed in correct order, start process0 first, then process1, precess2...
4.log+processID.txt file will be generated for your convenience.

*Lamport's logical clocks
Clock counter 
Processes maintain a Lamport clock at a constant rate (ticks/sec). However, the clock rates are different for each process. The clock increases by the clock rate every second. In addition, it increases by 1 for every event (sending/receiving/delivering message) as in the textbook pages 246-247. For example, if P0, P1, and P2 have clock counter unit of 2, 3, and 1, respectively, then the clocks tick as follows. Note that the process id is attached to low-order end of time separated by a decimal point to break the tie. 
 
P0’s clock: 2 ticks/sec  
0.0 
2.0 
4.0 
… 
 
P1’s clock: 3 ticks/sec  
0.1 
3.1 
6.1 
… 
 
P2’s clock: 1 tick/sec   
0.2 
1.2 
2.2 
